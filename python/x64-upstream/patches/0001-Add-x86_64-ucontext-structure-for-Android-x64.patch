From f3f8900d57d5242a30ca983de66b91e0b4069135 Mon Sep 17 00:00:00 2001
From: Zhenyu Liang <zhenyu.liang@intel.com>
Date: Thu, 20 Mar 2014 20:19:08 +0800
Subject: [PATCH 1/2] Add x86_64 ucontext structure for Android x64

---
 sandbox/linux/services/android_ucontext.h        |   2 +
 sandbox/linux/services/android_x86_64_ucontext.h | 153 +++++++++++++++++++++++
 2 files changed, 155 insertions(+)
 create mode 100644 sandbox/linux/services/android_x86_64_ucontext.h

diff --git a/sandbox/linux/services/android_ucontext.h b/sandbox/linux/services/android_ucontext.h
index 437bbab..caabaf5 100644
--- a/sandbox/linux/services/android_ucontext.h
+++ b/sandbox/linux/services/android_ucontext.h
@@ -11,6 +11,8 @@
 #include "sandbox/linux/services/android_arm_ucontext.h"
 #elif defined(__i386__)
 #include "sandbox/linux/services/android_i386_ucontext.h"
+#elif defined(__x86_64__)
+#include "sandbox/linux/services/android_x86_64_ucontext.h"
 #else
 #error "No support for your architecture in Android header"
 #endif
diff --git a/sandbox/linux/services/android_x86_64_ucontext.h b/sandbox/linux/services/android_x86_64_ucontext.h
new file mode 100644
index 0000000..f423811
--- /dev/null
+++ b/sandbox/linux/services/android_x86_64_ucontext.h
@@ -0,0 +1,153 @@
+/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _SYS_UCONTEXT_H
+#define _SYS_UCONTEXT_H 1
+
+/*#include <features.h>
+#include <signal.h>
+#include <bits/wordsize.h>*/
+
+/* We need the signal context definitions even if they are not used
+   included in <signal.h>.  */
+/*#include <bits/sigcontext.h>*/
+
+
+# define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int)))
+typedef struct
+  {
+    unsigned long int __val[_SIGSET_NWORDS];
+  } __sigset_t;
+
+
+
+/* Type for general register.  */
+typedef long int greg_t;
+
+/* Number of general registers.  */
+#define NGREG 23
+
+/* Container for all general registers.  */
+typedef greg_t gregset_t[NGREG];
+
+
+/* Number of each register in the `gregset_t' array.  */
+enum
+{
+  REG_R8 = 0,
+# define REG_R8   REG_R8
+  REG_R9,
+# define REG_R9   REG_R9
+  REG_R10,
+# define REG_R10  REG_R10
+  REG_R11,
+# define REG_R11  REG_R11
+  REG_R12,
+# define REG_R12  REG_R12
+  REG_R13,
+# define REG_R13  REG_R13
+  REG_R14,
+# define REG_R14  REG_R14
+  REG_R15,
+# define REG_R15  REG_R15
+  REG_RDI,
+# define REG_RDI  REG_RDI
+  REG_RSI,
+# define REG_RSI  REG_RSI
+  REG_RBP,
+# define REG_RBP  REG_RBP
+  REG_RBX,
+# define REG_RBX  REG_RBX
+  REG_RDX,
+# define REG_RDX  REG_RDX
+  REG_RAX,
+# define REG_RAX  REG_RAX
+  REG_RCX,
+# define REG_RCX  REG_RCX
+  REG_RSP,
+# define REG_RSP  REG_RSP
+  REG_RIP,
+# define REG_RIP  REG_RIP
+  REG_EFL,
+# define REG_EFL  REG_EFL
+  REG_CSGSFS,   /* Actually short cs, gs, fs, __pad0.  */
+# define REG_CSGSFS REG_CSGSFS
+  REG_ERR,
+# define REG_ERR  REG_ERR
+  REG_TRAPNO,
+# define REG_TRAPNO REG_TRAPNO
+  REG_OLDMASK,
+# define REG_OLDMASK  REG_OLDMASK
+  REG_CR2
+# define REG_CR2  REG_CR2
+};
+
+struct _libc_fpxreg
+{
+  unsigned short int significand[4];
+  unsigned short int exponent;
+  unsigned short int padding[3];
+};
+
+struct _libc_xmmreg
+{
+  __uint32_t  element[4];
+};
+
+struct _libc_fpstate
+{
+  /* 64-bit FXSAVE format.  */
+  __uint16_t    cwd;
+  __uint16_t    swd;
+  __uint16_t    ftw;
+  __uint16_t    fop;
+  __uint64_t    rip;
+  __uint64_t    rdp;
+  __uint32_t    mxcsr;
+  __uint32_t    mxcr_mask;
+  struct _libc_fpxreg _st[8];
+  struct _libc_xmmreg _xmm[16];
+  __uint32_t    padding[24];
+};
+
+/* Structure to describe FPU registers.  */
+typedef struct _libc_fpstate *fpregset_t;
+
+/* Context to describe whole processor state.  */
+typedef struct
+  {
+    gregset_t gregs;
+    /* Note that fpregs is a pointer.  */
+    fpregset_t fpregs;
+    unsigned long __reserved1 [8];
+} mcontext_t;
+
+/* Userlevel context.  */
+typedef struct ucontext
+  {
+    unsigned long int uc_flags;
+    struct ucontext *uc_link;
+    stack_t uc_stack;
+    mcontext_t uc_mcontext;
+    // TODO: Change the definition from __sigset_t to sigset_t. Not sure if this is correct.
+    //__sigset_t uc_sigmask;
+    sigset_t uc_sigmask;
+    struct _libc_fpstate __fpregs_mem;
+  } ucontext_t;
+
+#endif /* sys/ucontext.h */
-- 
1.8.3.2

