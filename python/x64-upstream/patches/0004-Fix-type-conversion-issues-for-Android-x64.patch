From 33a886585238325d53250d390760cf9f114b0371 Mon Sep 17 00:00:00 2001
From: Zhenyu Liang <zhenyu.liang@intel.com>
Date: Thu, 20 Mar 2014 20:24:29 +0800
Subject: [PATCH 4/4] Fix type conversion issues for Android x64

---
 chrome/browser/memory_details_android.cc                |    4 ++--
 chrome/browser/renderer_host/web_cache_manager.cc       |    3 ++-
 .../indexed_db/indexed_db_leveldb_coding_unittest.cc    |   15 ++++++++++-----
 tools/android/file_poller/file_poller.cc                |    2 +-
 4 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/chrome/browser/memory_details_android.cc b/chrome/browser/memory_details_android.cc
index fab8422..1dd8af8 100644
--- a/chrome/browser/memory_details_android.cc
+++ b/chrome/browser/memory_details_android.cc
@@ -7,10 +7,10 @@
 #include <set>
 #include <string>
 #include <vector>
-
 #include "base/bind.h"
 #include "base/memory/scoped_ptr.h"
 #include "base/process/process_iterator.h"
+#include "base/strings/utf_string_conversions.h"
 #include "chrome/common/chrome_constants.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/common/process_type.h"
@@ -130,7 +130,7 @@ void MemoryDetails::CollectProcessData(
   GetProcessDataMemoryInformation(current_browser_processes, &current_browser);
   current_browser.name = l10n_util::GetStringUTF16(IDS_PRODUCT_NAME);
   current_browser.process_name =
-      reinterpret_cast<unsigned int>(chrome::kBrowserProcessExecutableName);
+      base::ASCIIToUTF16(chrome::kBrowserProcessExecutableName);
   process_data_.push_back(current_browser);
 
   // Finally return to the browser thread.
diff --git a/chrome/browser/renderer_host/web_cache_manager.cc b/chrome/browser/renderer_host/web_cache_manager.cc
index 274bb46..f98fa2b 100644
--- a/chrome/browser/renderer_host/web_cache_manager.cc
+++ b/chrome/browser/renderer_host/web_cache_manager.cc
@@ -328,7 +328,8 @@ void WebCacheManager::EnactStrategy(const AllocationStrategy& strategy) {
       size_t max_dead_capacity = capacity / 2;
 #if defined(OS_ANDROID)
       if (base::android::SysUtils::IsLowEndDevice())
-        max_dead_capacity = std::min(512 * 1024U, max_dead_capacity);
+        max_dead_capacity = std::min(static_cast<size_t>(512 * 1024U),
+                                     max_dead_capacity);
 #endif
 
       host->Send(new ChromeViewMsg_SetCacheCapacities(min_dead_capacity,
diff --git a/content/browser/indexed_db/indexed_db_leveldb_coding_unittest.cc b/content/browser/indexed_db/indexed_db_leveldb_coding_unittest.cc
index 527d339..06bbf3b 100644
--- a/content/browser/indexed_db/indexed_db_leveldb_coding_unittest.cc
+++ b/content/browser/indexed_db/indexed_db_leveldb_coding_unittest.cc
@@ -296,7 +296,8 @@ TEST(IndexedDBLevelDBCodingTest, DecodeVarInt) {
     slice = StringPiece(&*v.begin(), v.size() - 1);
     EXPECT_FALSE(DecodeVarInt(&slice, &res));
 
-    slice = StringPiece(&*v.begin(), 0u);
+    slice = StringPiece(&*v.begin(),
+      static_cast<typename StringPiece::size_type>(0));
     EXPECT_FALSE(DecodeVarInt(&slice, &res));
 
     // Verify decoding at an offset, to detect unaligned memory access.
@@ -408,7 +409,8 @@ TEST(IndexedDBLevelDBCodingTest, DecodeStringWithLength) {
     slice = StringPiece(&*v.begin(), v.size() - 1);
     EXPECT_FALSE(DecodeStringWithLength(&slice, &res));
 
-    slice = StringPiece(&*v.begin(), 0u);
+    slice = StringPiece(&*v.begin(),
+      static_cast<typename StringPiece::size_type>(0));
     EXPECT_FALSE(DecodeStringWithLength(&slice, &res));
 
     // Verify decoding at an offset, to detect unaligned memory access.
@@ -516,7 +518,8 @@ TEST(IndexedDBLevelDBCodingTest, DecodeBinary) {
     slice = StringPiece(&*v.begin(), v.size() - 1);
     EXPECT_FALSE(DecodeBinary(&slice, &result));
 
-    slice = StringPiece(&*v.begin(), 0u);
+    slice = StringPiece(&*v.begin(),
+      static_cast<typename StringPiece::size_type>(0));
     EXPECT_FALSE(DecodeBinary(&slice, &result));
 
     // Verify decoding at an offset, to detect unaligned memory access.
@@ -557,7 +560,8 @@ TEST(IndexedDBLevelDBCodingTest, DecodeDouble) {
     slice = StringPiece(&*v.begin(), v.size() - 1);
     EXPECT_FALSE(DecodeDouble(&slice, &result));
 
-    slice = StringPiece(&*v.begin(), 0u);
+    slice = StringPiece(&*v.begin(),
+      static_cast<typename StringPiece::size_type>(0));
     EXPECT_FALSE(DecodeDouble(&slice, &result));
 
     // Verify decoding at an offset, to detect unaligned memory access.
@@ -602,7 +606,8 @@ TEST(IndexedDBLevelDBCodingTest, EncodeDecodeIDBKey) {
     slice = StringPiece(&*v.begin(), v.size() - 1);
     EXPECT_FALSE(DecodeIDBKey(&slice, &decoded_key));
 
-    slice = StringPiece(&*v.begin(), 0u);
+    slice = StringPiece(&*v.begin(),
+      static_cast<typename StringPiece::size_type>(0));
     EXPECT_FALSE(DecodeIDBKey(&slice, &decoded_key));
   }
 }
diff --git a/tools/android/file_poller/file_poller.cc b/tools/android/file_poller/file_poller.cc
index fc354f5..c73db8b 100644
--- a/tools/android/file_poller/file_poller.cc
+++ b/tools/android/file_poller/file_poller.cc
@@ -103,7 +103,7 @@ void poll_content(const Context& context) {
   socket_info.sin_port = htons(0);
   if (bind(sockfd, (struct sockaddr*)&socket_info, sizeof(socket_info)) < 0)
     PLOG(FATAL);
-  int size = sizeof(socket_info);
+  socklen_t size = sizeof(socket_info);
   getsockname(sockfd, (struct sockaddr*)&socket_info, &size);
   printf("%d\n", ntohs(socket_info.sin_port));
   // Using a pipe to ensure child is diconnected from the terminal before
-- 
1.7.10.4

