From 4b0be66c84f48ccf2cd476cace5041065da6a3aa Mon Sep 17 00:00:00 2001
From: Yang Gu <yang.gu@intel.com>
Date: Mon, 10 Mar 2014 20:25:26 +0800
Subject: [PATCH 1/8] Fix build issues in base/ for Android x64

---
 base/debug/proc_maps_linux.cc     | 4 ++++
 base/debug/stack_trace_android.cc | 9 +++++++--
 base/os_compat_android.cc         | 4 ++--
 3 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/base/debug/proc_maps_linux.cc b/base/debug/proc_maps_linux.cc
index b7a5862..ad4c466 100644
--- a/base/debug/proc_maps_linux.cc
+++ b/base/debug/proc_maps_linux.cc
@@ -18,8 +18,12 @@
 // is incompatible with Bionic's stdint.h defining uintptr_t as a unsigned int:
 // https://code.google.com/p/android/issues/detail?id=57218
 #undef SCNxPTR
+#ifdef __LP64__
+#define SCNxPTR "lx"
+#else
 #define SCNxPTR "x"
 #endif
+#endif
 
 namespace base {
 namespace debug {
diff --git a/base/debug/stack_trace_android.cc b/base/debug/stack_trace_android.cc
index 257e823..705c549 100644
--- a/base/debug/stack_trace_android.cc
+++ b/base/debug/stack_trace_android.cc
@@ -104,12 +104,17 @@ void StackTrace::OutputToStream(std::ostream* os) const {
       ++iter;
     }
 
-    *os << base::StringPrintf("#%02d 0x%08x ", i, address);
+#ifdef __LP64__
+#define FMT_ADDR  "0x%016lx"
+#else
+#define FMT_ADDR  "0x%08x"
+#endif
+    *os << base::StringPrintf("#%02zd " FMT_ADDR " ", i, address);
 
     if (iter != regions.end()) {
       uintptr_t rel_pc = address - iter->start + iter->offset;
       const char* path = iter->path.c_str();
-      *os << base::StringPrintf("%s+0x%08x", path, rel_pc);
+      *os << base::StringPrintf("%s+" FMT_ADDR, path, rel_pc);
     } else {
       *os << "<unknown>";
     }
diff --git a/base/os_compat_android.cc b/base/os_compat_android.cc
index ec221e4..dc7922a 100644
--- a/base/os_compat_android.cc
+++ b/base/os_compat_android.cc
@@ -41,8 +41,8 @@ int futimes(int fd, const struct timeval tv[2]) {
 // We replicate the behaviour of timegm() when the result overflows time_t.
 time_t timegm(struct tm* const t) {
   // time_t is signed on Android.
-  static const time_t kTimeMax = ~(1 << (sizeof(time_t) * CHAR_BIT - 1));
-  static const time_t kTimeMin = (1 << (sizeof(time_t) * CHAR_BIT - 1));
+  static const time_t kTimeMax = ~(1L << (sizeof(time_t) * CHAR_BIT - 1));
+  static const time_t kTimeMin = (1L << (sizeof(time_t) * CHAR_BIT - 1));
   time64_t result = timegm64(t);
   if (result < kTimeMin || result > kTimeMax)
     return -1;
-- 
1.8.3.2

