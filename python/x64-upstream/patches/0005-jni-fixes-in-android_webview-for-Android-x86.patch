From 5e12d0b2f4cd3e9c508cb3bdc8613027c9d2e36f Mon Sep 17 00:00:00 2001
From: Yang Gu <yang.gu@intel.com>
Date: Tue, 11 Feb 2014 12:37:43 +0800
Subject: [PATCH 5/9] jni fixes in android_webview/ for Android x86

---
 .../browser/gpu_memory_buffer_factory_impl.cc      |  4 ++--
 .../org/chromium/android_webview/AwContents.java   | 28 +++++++++++-----------
 .../chromium/android_webview/AwDevToolsServer.java |  8 +++----
 .../chromium/android_webview/AwPdfExporter.java    |  2 +-
 .../org/chromium/android_webview/AwSettings.java   |  2 +-
 android_webview/native/aw_contents.cc              | 20 ++++++++--------
 android_webview/native/aw_contents.h               |  6 ++---
 android_webview/native/aw_dev_tools_server.cc      |  8 +++----
 android_webview/native/aw_pdf_exporter.cc          |  2 +-
 android_webview/public/browser/draw_gl.h           | 14 +++++------
 10 files changed, 47 insertions(+), 47 deletions(-)

diff --git a/android_webview/browser/gpu_memory_buffer_factory_impl.cc b/android_webview/browser/gpu_memory_buffer_factory_impl.cc
index c4a6cac..7b8b9d0 100644
--- a/android_webview/browser/gpu_memory_buffer_factory_impl.cc
+++ b/android_webview/browser/gpu_memory_buffer_factory_impl.cc
@@ -19,7 +19,7 @@ AwDrawGLFunctionTable* g_gl_draw_functions = NULL;
 
 class GpuMemoryBufferImpl : public gfx::GpuMemoryBuffer {
  public:
-  GpuMemoryBufferImpl(int buffer_id, gfx::Size size)
+  GpuMemoryBufferImpl(long buffer_id, gfx::Size size)
       : buffer_id_(buffer_id),
         size_(size),
         mapped_(false) {
@@ -91,7 +91,7 @@ gfx::GpuMemoryBuffer* GpuMemoryBufferFactoryImpl::CreateGpuMemoryBuffer(
   // GL_RGBA8_OES.
   CHECK_EQ(static_cast<GLenum>(GL_RGBA8_OES), internalformat);
   CHECK(g_gl_draw_functions);
-  int buffer_id = g_gl_draw_functions->create_graphic_buffer(width, height);
+  long buffer_id = g_gl_draw_functions->create_graphic_buffer(width, height);
   if (!buffer_id)
     return NULL;
 
diff --git a/android_webview/java/src/org/chromium/android_webview/AwContents.java b/android_webview/java/src/org/chromium/android_webview/AwContents.java
index 408b8cc..60d72d0 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwContents.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwContents.java
@@ -509,7 +509,7 @@ public class AwContents {
     }
 
     private static ContentViewCore createAndInitializeContentViewCore(ViewGroup containerView,
-            InternalAccessDelegate internalDispatcher, int nativeWebContents,
+            InternalAccessDelegate internalDispatcher, long nativeWebContents,
             GestureStateListener gestureStateListener,
             ContentViewClient contentViewClient,
             ContentViewCore.ZoomControlsDelegate zoomControlsDelegate) {
@@ -549,7 +549,7 @@ public class AwContents {
         // bind all the native->java relationships.
         mCleanupReference = new CleanupReference(this, new DestroyRunnable(mNativeAwContents));
 
-        int nativeWebContents = nativeGetWebContents(mNativeAwContents);
+        long nativeWebContents = nativeGetWebContents(mNativeAwContents);
         mContentViewCore = createAndInitializeContentViewCore(
                 mContainerView, mInternalAccessAdapter, nativeWebContents,
                 new AwGestureStateListener(), mContentViewClient, mZoomControls);
@@ -569,7 +569,7 @@ public class AwContents {
      * provide the AwContents to host the pop up content.
      */
     public void supplyContentsForPopup(AwContents newContents) {
-        int popupNativeAwContents = nativeReleasePopupAwContents(mNativeAwContents);
+        long popupNativeAwContents = nativeReleasePopupAwContents(mNativeAwContents);
         if (popupNativeAwContents == 0) {
             Log.w(TAG, "Popup WebView bind failed: no pending content.");
             if (newContents != null) newContents.destroy();
@@ -585,7 +585,7 @@ public class AwContents {
 
     // Recap: supplyContentsForPopup() is called on the parent window's content, this method is
     // called on the popup window's content.
-    private void receivePopupContents(int popupNativeAwContents) {
+    private void receivePopupContents(long popupNativeAwContents) {
         mDeferredShouldOverrideUrlLoadingIsPendingForPopup = true;
         // Save existing view state.
         final boolean wasAttached = mIsAttachedToWindow;
@@ -672,15 +672,15 @@ public class AwContents {
         return mAwPdfExporter;
     }
 
-    public static void setAwDrawSWFunctionTable(int functionTablePointer) {
+    public static void setAwDrawSWFunctionTable(long functionTablePointer) {
         nativeSetAwDrawSWFunctionTable(functionTablePointer);
     }
 
-    public static void setAwDrawGLFunctionTable(int functionTablePointer) {
+    public static void setAwDrawGLFunctionTable(long functionTablePointer) {
         nativeSetAwDrawGLFunctionTable(functionTablePointer);
     }
 
-    public static int getAwDrawGLFunction() {
+    public static long getAwDrawGLFunction() {
         return nativeGetAwDrawGLFunction();
     }
 
@@ -697,7 +697,7 @@ public class AwContents {
         return nativeGetNativeInstanceCount();
     }
 
-    public int getAwDrawGLViewContext() {
+    public long getAwDrawGLViewContext() {
         // Only called during early construction, so client should not have had a chance to
         // call destroy yet.
         assert mNativeAwContents != 0;
@@ -1992,9 +1992,9 @@ public class AwContents {
 
     private static native long nativeInit(AwBrowserContext browserContext);
     private static native void nativeDestroy(long nativeAwContents);
-    private static native void nativeSetAwDrawSWFunctionTable(int functionTablePointer);
-    private static native void nativeSetAwDrawGLFunctionTable(int functionTablePointer);
-    private static native int nativeGetAwDrawGLFunction();
+    private static native void nativeSetAwDrawSWFunctionTable(long functionTablePointer);
+    private static native void nativeSetAwDrawGLFunctionTable(long functionTablePointer);
+    private static native long nativeGetAwDrawGLFunction();
     private static native int nativeGetNativeInstanceCount();
     private static native void nativeSetShouldDownloadFavicons();
     private native void nativeSetJavaPeers(long nativeAwContents, AwContents awContents,
@@ -2002,7 +2002,7 @@ public class AwContents {
             AwContentsClientBridge contentsClientBridge,
             AwContentsIoThreadClient ioThreadClient,
             InterceptNavigationDelegate navigationInterceptionDelegate);
-    private native int nativeGetWebContents(long nativeAwContents);
+    private native long nativeGetWebContents(long nativeAwContents);
 
     private native void nativeDocumentHasImages(long nativeAwContents, Message message);
     private native void nativeGenerateMHTML(
@@ -2041,11 +2041,11 @@ public class AwContents {
     // Returns false if restore state fails.
     private native boolean nativeRestoreFromOpaqueState(long nativeAwContents, byte[] state);
 
-    private native int nativeReleasePopupAwContents(long nativeAwContents);
+    private native long nativeReleasePopupAwContents(long nativeAwContents);
     private native void nativeFocusFirstNode(long nativeAwContents);
     private native void nativeSetBackgroundColor(long nativeAwContents, int color);
 
-    private native int nativeGetAwDrawGLViewContext(long nativeAwContents);
+    private native long nativeGetAwDrawGLViewContext(long nativeAwContents);
     private native long nativeCapturePicture(long nativeAwContents, int width, int height);
     private native void nativeEnableOnNewPicture(long nativeAwContents, boolean enabled);
     private native void nativeClearView(long nativeAwContents);
diff --git a/android_webview/java/src/org/chromium/android_webview/AwDevToolsServer.java b/android_webview/java/src/org/chromium/android_webview/AwDevToolsServer.java
index 915f2c6..f4e683b 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwDevToolsServer.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwDevToolsServer.java
@@ -12,7 +12,7 @@ import org.chromium.base.JNINamespace;
 @JNINamespace("android_webview")
 public class AwDevToolsServer {
 
-    private int mNativeDevToolsServer = 0;
+    private long mNativeDevToolsServer = 0;
 
     public AwDevToolsServer() {
         mNativeDevToolsServer = nativeInitRemoteDebugging();
@@ -27,7 +27,7 @@ public class AwDevToolsServer {
         nativeSetRemoteDebuggingEnabled(mNativeDevToolsServer, enabled);
     }
 
-    private native int nativeInitRemoteDebugging();
-    private native void nativeDestroyRemoteDebugging(int devToolsServer);
-    private native void nativeSetRemoteDebuggingEnabled(int devToolsServer, boolean enabled);
+    private native long nativeInitRemoteDebugging();
+    private native void nativeDestroyRemoteDebugging(long devToolsServer);
+    private native void nativeSetRemoteDebuggingEnabled(long devToolsServer, boolean enabled);
 }
diff --git a/android_webview/java/src/org/chromium/android_webview/AwPdfExporter.java b/android_webview/java/src/org/chromium/android_webview/AwPdfExporter.java
index a29ee4d..d8b8e37 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwPdfExporter.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwPdfExporter.java
@@ -69,7 +69,7 @@ public class AwPdfExporter {
     }
 
     @CalledByNative
-    private void setNativeAwPdfExporter(int nativePdfExporter) {
+    private void setNativeAwPdfExporter(long nativePdfExporter) {
         mNativeAwPdfExporter = nativePdfExporter;
         // Handle the cornercase that Webview.Destroy is called before the native side
         // has a chance to complete the pdf exporting.
diff --git a/android_webview/java/src/org/chromium/android_webview/AwSettings.java b/android_webview/java/src/org/chromium/android_webview/AwSettings.java
index 928c73e..de9371e 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwSettings.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwSettings.java
@@ -257,7 +257,7 @@ public class AwSettings {
         }
     }
 
-    void setWebContents(int nativeWebContents) {
+    void setWebContents(long nativeWebContents) {
         synchronized (mAwSettingsLock) {
             if (mNativeAwSettings != 0) {
                 nativeDestroy(mNativeAwSettings);
diff --git a/android_webview/native/aw_contents.cc b/android_webview/native/aw_contents.cc
index 074315a..8e04b5c 100644
--- a/android_webview/native/aw_contents.cc
+++ b/android_webview/native/aw_contents.cc
@@ -80,7 +80,7 @@ using content::WebContents;
 
 extern "C" {
 static AwDrawGLFunction DrawGLFunction;
-static void DrawGLFunction(int view_context,
+static void DrawGLFunction(long view_context,
                            AwDrawGLInfo* draw_info,
                            void* spare) {
   // |view_context| is the value that was returned from the java
@@ -317,7 +317,7 @@ AwContents::~AwContents() {
   }
 }
 
-jint AwContents::GetWebContents(JNIEnv* env, jobject obj) {
+jlong AwContents::GetWebContents(JNIEnv* env, jobject obj) {
   DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
   DCHECK(web_contents_);
   return reinterpret_cast<jint>(web_contents_.get());
@@ -341,18 +341,18 @@ static jlong Init(JNIEnv* env, jclass, jobject browser_context) {
   return reinterpret_cast<intptr_t>(new AwContents(web_contents.Pass()));
 }
 
-static void SetAwDrawSWFunctionTable(JNIEnv* env, jclass, jint function_table) {
+static void SetAwDrawSWFunctionTable(JNIEnv* env, jclass, jlong function_table) {
   BrowserViewRenderer::SetAwDrawSWFunctionTable(
       reinterpret_cast<AwDrawSWFunctionTable*>(function_table));
 }
 
-static void SetAwDrawGLFunctionTable(JNIEnv* env, jclass, jint function_table) {
+static void SetAwDrawGLFunctionTable(JNIEnv* env, jclass, jlong function_table) {
   GpuMemoryBufferFactoryImpl::SetAwDrawGLFunctionTable(
       reinterpret_cast<AwDrawGLFunctionTable*>(function_table));
 }
 
-static jint GetAwDrawGLFunction(JNIEnv* env, jclass) {
-  return reinterpret_cast<jint>(&DrawGLFunction);
+static jlong GetAwDrawGLFunction(JNIEnv* env, jclass) {
+  return reinterpret_cast<intptr_t>(&DrawGLFunction);
 }
 
 // static
@@ -360,9 +360,9 @@ jint GetNativeInstanceCount(JNIEnv* env, jclass) {
   return base::subtle::NoBarrier_Load(&g_instance_count);
 }
 
-jint AwContents::GetAwDrawGLViewContext(JNIEnv* env, jobject obj) {
+jlong AwContents::GetAwDrawGLViewContext(JNIEnv* env, jobject obj) {
   DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
-  return reinterpret_cast<jint>(browser_view_renderer_.get());
+  return reinterpret_cast<intptr_t>(browser_view_renderer_.get());
 }
 
 namespace {
@@ -851,9 +851,9 @@ void AwContents::SetBackgroundColor(JNIEnv* env, jobject obj, jint color) {
   render_view_host_ext_->SetBackgroundColor(color);
 }
 
-jint AwContents::ReleasePopupAwContents(JNIEnv* env, jobject obj) {
+jlong AwContents::ReleasePopupAwContents(JNIEnv* env, jobject obj) {
   DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
-  return reinterpret_cast<jint>(pending_contents_.release());
+  return reinterpret_cast<intptr_t>(pending_contents_.release());
 }
 
 gfx::Point AwContents::GetLocationOnScreen() {
diff --git a/android_webview/native/aw_contents.h b/android_webview/native/aw_contents.h
index ed69b4b..8cb8391 100644
--- a/android_webview/native/aw_contents.h
+++ b/android_webview/native/aw_contents.h
@@ -79,7 +79,7 @@ class AwContents : public FindHelper::Listener,
                     jobject contents_client_bridge,
                     jobject io_thread_client,
                     jobject intercept_navigation_delegate);
-  jint GetWebContents(JNIEnv* env, jobject obj);
+  jlong GetWebContents(JNIEnv* env, jobject obj);
 
   void Destroy(JNIEnv* env, jobject obj);
   void DocumentHasImages(JNIEnv* env, jobject obj, jobject message);
@@ -117,7 +117,7 @@ class AwContents : public FindHelper::Listener,
                             jint visible_top,
                             jint visible_right,
                             jint visible_bottom);
-  jint GetAwDrawGLViewContext(JNIEnv* env, jobject obj);
+  jlong GetAwDrawGLViewContext(JNIEnv* env, jobject obj);
   jlong CapturePicture(JNIEnv* env, jobject obj, int width, int height);
   void EnableOnNewPicture(JNIEnv* env, jobject obj, jboolean enabled);
   void ClearView(JNIEnv* env, jobject obj);
@@ -171,7 +171,7 @@ class AwContents : public FindHelper::Listener,
 
   void ClearCache(JNIEnv* env, jobject obj, jboolean include_disk_files);
   void SetPendingWebContentsForPopup(scoped_ptr<content::WebContents> pending);
-  jint ReleasePopupAwContents(JNIEnv* env, jobject obj);
+  jlong ReleasePopupAwContents(JNIEnv* env, jobject obj);
 
   void ScrollTo(JNIEnv* env, jobject obj, jint x, jint y);
   void SetDipScale(JNIEnv* env, jobject obj, jfloat dip_scale);
diff --git a/android_webview/native/aw_dev_tools_server.cc b/android_webview/native/aw_dev_tools_server.cc
index 0bedb7a..012d9fe 100644
--- a/android_webview/native/aw_dev_tools_server.cc
+++ b/android_webview/native/aw_dev_tools_server.cc
@@ -199,19 +199,19 @@ bool RegisterAwDevToolsServer(JNIEnv* env) {
   return RegisterNativesImpl(env);
 }
 
-static jint InitRemoteDebugging(JNIEnv* env,
+static jlong InitRemoteDebugging(JNIEnv* env,
                                 jobject obj) {
   AwDevToolsServer* server = new AwDevToolsServer();
-  return reinterpret_cast<jint>(server);
+  return reinterpret_cast<intptr_t>(server);
 }
 
-static void DestroyRemoteDebugging(JNIEnv* env, jobject obj, jint server) {
+static void DestroyRemoteDebugging(JNIEnv* env, jobject obj, jlong server) {
   delete reinterpret_cast<AwDevToolsServer*>(server);
 }
 
 static void SetRemoteDebuggingEnabled(JNIEnv* env,
                                       jobject obj,
-                                      jint server,
+                                      jlong server,
                                       jboolean enabled) {
   AwDevToolsServer* devtools_server =
       reinterpret_cast<AwDevToolsServer*>(server);
diff --git a/android_webview/native/aw_pdf_exporter.cc b/android_webview/native/aw_pdf_exporter.cc
index fbf1d07..a87a007 100644
--- a/android_webview/native/aw_pdf_exporter.cc
+++ b/android_webview/native/aw_pdf_exporter.cc
@@ -33,7 +33,7 @@ AwPdfExporter::AwPdfExporter(JNIEnv* env,
       web_contents_(web_contents) {
   DCHECK(obj);
   Java_AwPdfExporter_setNativeAwPdfExporter(
-      env, obj, reinterpret_cast<jint>(this));
+      env, obj, reinterpret_cast<intptr_t>(this));
 }
 
 AwPdfExporter::~AwPdfExporter() {
diff --git a/android_webview/public/browser/draw_gl.h b/android_webview/public/browser/draw_gl.h
index e3108d5..a89db3e 100644
--- a/android_webview/public/browser/draw_gl.h
+++ b/android_webview/public/browser/draw_gl.h
@@ -74,7 +74,7 @@ struct AwDrawGLInfo {
 // call to AwContents.getAwDrawGLViewContext().
 // |draw_info| carries the in and out parameters for this draw.
 // |spare| ignored; pass NULL.
-typedef void (AwDrawGLFunction)(int view_context,
+typedef void (AwDrawGLFunction)(long view_context,
                                 AwDrawGLInfo* draw_info,
                                 void* spare);
 enum AwMapMode {
@@ -84,17 +84,17 @@ enum AwMapMode {
 };
 
 // Called to create a GraphicBuffer
-typedef int AwCreateGraphicBufferFunction(int w, int h);
+typedef long AwCreateGraphicBufferFunction(int w, int h);
 // Called to release a GraphicBuffer
-typedef void AwReleaseGraphicBufferFunction(int buffer_id);
+typedef void AwReleaseGraphicBufferFunction(long buffer_id);
 // Called to map a GraphicBuffer in |mode|.
-typedef int AwMapFunction(int buffer_id, AwMapMode mode, void** vaddr);
+typedef int AwMapFunction(long buffer_id, AwMapMode mode, void** vaddr);
 // Called to unmap a GraphicBuffer
-typedef int AwUnmapFunction(int buffer_id);
+typedef int AwUnmapFunction(long, buffer_id);
 // Called to get a native buffer pointer
-typedef void* AwGetNativeBufferFunction(int buffer_id);
+typedef void* AwGetNativeBufferFunction(long buffer_id);
 // Called to get the stride of the buffer
-typedef unsigned int AwGetStrideFunction(int buffer_id);
+typedef unsigned int AwGetStrideFunction(long buffer_id);
 
 // Set of functions used in rendering in hardware mode
 struct AwDrawGLFunctionTable {
-- 
1.8.3.2

